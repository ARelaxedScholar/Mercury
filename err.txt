    Checking orichalcum v0.2.5 (/home/user/Documents/Coding/orichalcum)
warning: enum `Executable` is never used
  --> src/core/mod.rs:10:10
   |
10 | pub enum Executable {
   |          ^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: method `successors` is never used
  --> src/core/mod.rs:16:12
   |
15 | impl Executable {
   | --------------- method in this implementation
16 |     pub fn successors(&self) -> &HashMap<String, Executable> {
   |            ^^^^^^^^^^

warning: struct `AsyncBatchLogic` is never constructed
 --> src/core/async_impl/async_batch_node.rs:8:12
  |
8 | pub struct AsyncBatchLogic<L: AsyncNodeLogic> {
  |            ^^^^^^^^^^^^^^^

warning: associated function `new` is never used
  --> src/core/async_impl/async_batch_node.rs:13:12
   |
12 | impl<L: AsyncNodeLogic> AsyncBatchLogic<L> {
   | ------------------------------------------ associated function in this implementation
13 |     pub fn new(logic: L) -> Self {
   |            ^^^

warning: function `new_async_batch_node` is never used
  --> src/core/async_impl/async_batch_node.rs:58:8
   |
58 | pub fn new_async_batch_node<L: AsyncNodeLogic + Clone>(logic: L) -> AsyncNode {
   |        ^^^^^^^^^^^^^^^^^^^^

warning: struct `AsyncFlowLogic` is never constructed
 --> src/core/async_impl/async_flow.rs:9:12
  |
9 | pub struct AsyncFlowLogic {
  |            ^^^^^^^^^^^^^^

warning: struct `AsyncFlow` is never constructed
  --> src/core/async_impl/async_flow.rs:16:12
   |
16 | pub struct AsyncFlow(AsyncNode);
   |            ^^^^^^^^^

warning: associated items `new` and `start` are never used
  --> src/core/async_impl/async_flow.rs:34:12
   |
33 | impl AsyncFlow {
   | -------------- associated items in this implementation
34 |     pub fn new(start: Executable) -> AsyncFlow {
   |            ^^^
...
38 |     pub fn start(&mut self, start: Executable) {
   |            ^^^^^

warning: struct `AsyncNode` is never constructed
  --> src/core/async_impl/async_node.rs:11:12
   |
11 | pub struct AsyncNode {
   |            ^^^^^^^^^

warning: associated items `new`, `set_params`, `next`, `next_on`, `run`, and `run_with_params` are never used
  --> src/core/async_impl/async_node.rs:26:12
   |
25 | impl AsyncNode {
   | -------------- associated items in this implementation
26 |     pub fn new<L: AsyncNodeLogic>(behaviour: L) -> Self {
   |            ^^^
...
33 |     pub fn set_params(&mut self, params: HashMap<String, NodeValue>) {
   |            ^^^^^^^^^^
...
36 |     pub fn next(self, node: Executable) -> Self {
   |            ^^^^
...
39 |     pub fn next_on(mut self, node: Executable, action: &str) -> Self {
   |            ^^^^^^^
...
51 |     pub async fn run(&self, shared: &mut HashMap<String, NodeValue>) -> Option<String> {
   |                  ^^^
...
57 |     pub async fn run_with_params(
   |                  ^^^^^^^^^^^^^^^

warning: trait `AsyncNodeLogic` is never used
  --> src/core/async_impl/async_node.rs:70:11
   |
70 | pub trait AsyncNodeLogic: AsAny + Send + Sync + 'static {
   |           ^^^^^^^^^^^^^^

warning: constant `DEFAULT_MAX_CONCURRENCY` is never used
 --> src/core/async_impl/async_parallel_batch_node.rs:7:7
  |
7 | const DEFAULT_MAX_CONCURRENCY: usize = 50;
  |       ^^^^^^^^^^^^^^^^^^^^^^^

warning: struct `AsyncParallelBatchLogic` is never constructed
  --> src/core/async_impl/async_parallel_batch_node.rs:10:12
   |
10 | pub struct AsyncParallelBatchLogic<L: AsyncNodeLogic> {
   |            ^^^^^^^^^^^^^^^^^^^^^^^

warning: associated items `new` and `with_concurrency` are never used
  --> src/core/async_impl/async_parallel_batch_node.rs:16:12
   |
15 | impl<L: AsyncNodeLogic> AsyncParallelBatchLogic<L> {
   | -------------------------------------------------- associated items in this implementation
16 |     pub fn new(logic: L) -> Self {
   |            ^^^
...
23 |     pub fn with_concurrency(self, max_concurrency: usize) -> Self {
   |            ^^^^^^^^^^^^^^^^

warning: function `new_async_parallel_batch_node` is never used
  --> src/core/async_impl/async_parallel_batch_node.rs:78:8
   |
78 | pub fn new_async_parallel_batch_node<L: AsyncNodeLogic + Clone>(
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: struct `BatchFlow` is never constructed
  --> src/core/sync_impl/batch_flow.rs:14:12
   |
14 | pub struct BatchFlow(Node);
   |            ^^^^^^^^^

warning: struct `BatchFlowLogic` is never constructed
  --> src/core/sync_impl/batch_flow.rs:32:12
   |
32 | pub struct BatchFlowLogic<F>
   |            ^^^^^^^^^^^^^^

warning: associated function `new` is never used
   --> src/core/sync_impl/batch_flow.rs:115:12
    |
114 | impl BatchFlow {
    | -------------- associated function in this implementation
115 |     pub fn new<F>(flow: Node, prep_fn: F) -> Self
    |            ^^^

warning: struct `BatchLogic` is never constructed
  --> src/core/sync_impl/batch_node.rs:10:12
   |
10 | pub struct BatchLogic<L: NodeLogic> {
   |            ^^^^^^^^^^

warning: associated function `new` is never used
  --> src/core/sync_impl/batch_node.rs:20:12
   |
19 | impl<L: NodeLogic> BatchLogic<L> {
   | -------------------------------- associated function in this implementation
20 |     pub fn new(logic: L) -> Self {
   |            ^^^

warning: function `new_batch_node` is never used
  --> src/core/sync_impl/batch_node.rs:66:8
   |
66 | pub fn new_batch_node<L: NodeLogic + Clone>(logic: L) -> Node {
   |        ^^^^^^^^^^^^^^

warning: struct `FlowLogic` is never constructed
 --> src/core/sync_impl/flow.rs:8:12
  |
8 | pub struct FlowLogic {
  |            ^^^^^^^^^

warning: struct `Flow` is never constructed
  --> src/core/sync_impl/flow.rs:15:12
   |
15 | pub struct Flow(Node);
   |            ^^^^

warning: associated items `new` and `start` are never used
  --> src/core/sync_impl/flow.rs:33:12
   |
32 | impl Flow {
   | --------- associated items in this implementation
33 |     pub fn new(start: Node) -> Flow {
   |            ^^^
...
37 |     pub fn start(&mut self, start: Node) {
   |            ^^^^^

warning: struct `Node` is never constructed
 --> src/core/sync_impl/node.rs:9:12
  |
9 | pub struct Node {
  |            ^^^^

warning: associated items `new`, `set_params`, `next`, `next_on`, `run`, and `run_with_params` are never used
  --> src/core/sync_impl/node.rs:15:12
   |
14 | impl Node {
   | --------- associated items in this implementation
15 |     pub fn new<L: NodeLogic + 'static>(behaviour: L) -> Self {
   |            ^^^
...
21 |     pub fn set_params(&mut self, params: HashMap<String, NodeValue>) {
   |            ^^^^^^^^^^
...
24 |     pub fn next(self, node: Executable) -> Self {
   |            ^^^^
...
27 |     pub fn next_on(mut self, node: Executable, action: &str) -> Self {
   |            ^^^^^^^
...
39 |     pub fn run(&self, shared: &mut HashMap<String, NodeValue>) -> Option<String> {
   |            ^^^
...
45 |     pub fn run_with_params(
   |            ^^^^^^^^^^^^^^^

warning: struct `NodeCore` is never constructed
  --> src/core/sync_impl/node.rs:57:12
   |
57 | pub struct NodeCore {
   |            ^^^^^^^^

warning: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Vec`
  --> src/core/async_impl/async_parallel_batch_node.rs:50:31
   |
50 |             let futures = arr.into_iter().map(|item| self.logic.exec(item.clone()));
   |                               ^^^^^^^^^ help: call directly: `iter`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref
   = note: `#[warn(clippy::into_iter_on_ref)]` on by default

warning: `orichalcum` (lib) generated 28 warnings (run `cargo clippy --fix --lib -p orichalcum` to apply 1 suggestion)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.68s
